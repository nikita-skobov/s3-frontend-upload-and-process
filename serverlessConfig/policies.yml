# NOTE: in this file, we define some policies that can then be reused in various IAM roles
# that are defined in the resources.yml file. These policies do not get created as actual policies, so they
# cannot be reused in different applications, instead they are inline policies attached directly
# to the roles. Also, none of these policies get used unless they are attached to a role.
# see the resources.yml file to see how these policies are attached

policies:
  logAll: # use this policy within your lambda function role(s) to enable cloudwatch logging
    PolicyName: "${self:service}-logAll-policy"
    PolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: "Allow"
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
          Resource: "arn:aws:logs:*:*:*"

  snsPublish: # use this policy within your lambda function role(s) to enable DLQ publishing
    PolicyName: "${self:service}-snsPublish-policy"
    PolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: "Allow"
          Action:
            - sns:Publish
          Resource:
            Ref: LambdaDLQTopic # make sure you have a resource with this logical name

  putItemProgressTable:
    PolicyName: "${self:service}-putItemProgressTable-policy"
    PolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Action: dynamodb:PutItem
          Resource: 
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamoTableName}"

  updateItemProgressTable:
    PolicyName: "${self:service}-updateItemProgressTable-policy"
    PolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Action: dynamodb:UpdateItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamoTableName}"

  getItemProgressTable:
    PolicyName: "${self:service}-getItemProgressTable-policy"
    PolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Action: dynamodb:GetItem
          Resource: 
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamoTableName}"

  getObjectUploadBucket:
    PolicyName: "${self:service}-getObjectUploadBucket-policy"
    PolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Action: s3:GetObject
          Resource: "arn:aws:s3:::${self:custom.uploadBucketName}/*"

  putObjectOutputBucket:
    PolicyName: "${self:service}-putObjectOutputBucket-policy"
    PolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Action: s3:PutObject
          Resource: "arn:aws:s3:::${self:custom.outputBucketName}/*"

  putObjectUploadBucket:
    PolicyName: "${self:service}-putObjectOutputBucket-policy"
    PolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Action: s3:PutObject
          Resource: "arn:aws:s3:::${self:custom.uploadBucketName}/*"