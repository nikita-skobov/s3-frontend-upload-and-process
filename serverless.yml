service: ${opt:service, "s3uploader"}
provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, "staging"}
  region: ${opt:region, "us-east-1"}
package:
  exclude:
    - LICENSE
    - README.md
    # the following is an example of how to exclude all node_modules except
    # for the ones you want
    - node_modules/**
    - '!node_modules/has/**'
custom:
  # account: ${opt:account} # your 12 digit AWS account number
  timeout: ${opt:timeout, "30"}
  memorySize: ${opt:memorySize, "2560"}
  uploadPrefix: ${opt:uploadPrefix, "upload"}
  uploadBucketName: ${opt:uploadBucket, "${self:service}-${self:custom.uploadPrefix}-bucket"}
  outputPrefix: ${opt:outputPrefix, "output"}
  outputBucketName: ${opt:outputBucket, "${self:service}-${self:custom.outputPrefix}-bucket"}
  maxUploadSize: ${opt:maxUploadSize, "30000000"} # defaults to 30MB
  s3UploadedRoleName: "${self:service}-${self:provider.stage}-s3Uploaded-role"
  s3SignatureRoleName: "${self:service}-${self:provider.stage}-s3Signature-role"
  uploadedHandler: ${opt:uploadHandler, "handlers/upload.handler"}
  signatureHandler: ${opt:signatureHandler, "handlers/signature.handler"}
  onconnectHandler: ${opt:onconnectHandler, "handlers/websocket.connect"}
  signaturePath: ${opt:signaturePath, "/issue/signature"}
  urlExpires: ${opt:urlExpires, "120000"} # defaults to 2 minutes

  policies:
    # use this policy within your lambda function role(s) to enable cloudwatch logging
    logAll: ${file(./serverlessConfig/policies.yml):logAll}
    # use this policy within your lambda function role(s) to enable DLQ publishing
    snsPublish: ${file(./serverlessConfig/policies.yml):snsPublish}
    getObjectUploadBucket: ${file(./serverlessConfig/policies.yml):getObjectUploadBucket}
    putObjectOutputBucket: ${file(./serverlessConfig/policies.yml):putObjectOutputBucket}
    putObjectUploadBucket: ${file(./serverlessConfig/policies.yml):putObjectUploadBucket}

functions:
  s3SignatureGenerator: ${file(./serverlessConfig/functions.yml):s3SignatureGenerator}
  s3Uploaded: ${file(./serverlessConfig/functions.yml):s3Uploaded}
  onconnect: ${file(./serverlessConfig/functions.yml):onconnect}

resources:
  Resources:
    S3BucketUploadbucket: ${file(./serverlessConfig/resources.yml):S3BucketUploadbucket}
    S3UploadedLambdaPermissionUploadbucketS3: ${file(./serverlessConfig/resources.yml):S3UploadedLambdaPermissionUploadbucketS3}
    s3OutputBucket: ${file(./serverlessConfig/resources.yml):s3OutputBucket}
    s3UploadedRole: ${file(./serverlessConfig/resources.yml):s3UploadedRole}
    s3SignatureRole: ${file(./serverlessConfig/resources.yml):s3SignatureRole}
    OnConnectionPermission:
      Type: AWS::Lambda::Permission
      DependsOn:
        - OnconnectLambdaFunction
        - MyWebsocketApi
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Ref: OnconnectLambdaFunction
        Principal: apigateway.amazonaws.com
    MyWebsocketApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: myWebsocketApi
        ProtocolType: WEBSOCKET
        RouteSelectionExpression: "$request.body.action"
    ConnectRoute:
      Type: AWS::ApiGatewayV2::Route
      Properties:
        ApiId:
          Ref: MyWebsocketApi
        RouteKey: $connect
        AuthorizationType: NONE
        OperationName: ConnectRoute
        Target:
          Fn::Join:
            - '/'
            - - 'integrations'
              - Ref: ConnectIntegration
    ConnectIntegration:
      Type: AWS::ApiGatewayV2::Integration
      Properties:
        ApiId:
          Ref: MyWebsocketApi
        Description: connect integration
        IntegrationType: AWS_PROXY
        IntegrationUri:
          Fn::Join:
            - ''
            - - "arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/"
              - Fn::GetAtt:
                - OnconnectLambdaFunction
                - Arn
              - "/invocations"
